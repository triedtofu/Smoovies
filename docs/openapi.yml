openapi: 3.0.0
servers:
  - url: https://comp3900-lawnchair-back.herokuapp.com/
    description: Test server
  - url: https://comp3900-lawnchair-front.herokuapp.com/
    description: Test server
  - url: https://comp3900-lawnchair.herokuapp.com/
    description: Production server
info:
  description: This is a simple API
  version: 1.0.0
  title: Movie Finder API
tags:
  - name: Auth
    description: Managing user authentication and authorisation
  - name: Movies
    description: Managing movie data
  - name: Users
    description: Managing user profiles
  - name: Actors
    description: Managing actor data
  - name: Directors
    description: Managing director data
paths:
  /api/user/login:
    post:
      tags:
        - Auth
      summary: Logs a user in to the application
      description: Given correct user credentials, returns an authorised access token for making subsequent calls
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  $ref: '#/components/schemas/Email'
                password:
                  $ref: '#/components/schemas/Password'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    $ref: '#/components/schemas/Token'
                  userId:
                    $ref: '#/components/schemas/UserId'
                  name:
                    $ref: '#/components/schemas/Name'
                  isAdmin:
                    $ref: '#/components/schemas/IsAdmin'
        '400':
          $ref: '#/components/responses/InputError'
  /api/user/register:
    post:
      tags:
        - Auth
      summary: Registers a user in the application
      description: Given user details, registers the user and returns an authorised access token for making subsequent calls
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  $ref: '#/components/schemas/Name'
                email:
                  $ref: '#/components/schemas/Email'
                password:
                  $ref: '#/components/schemas/Password'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    $ref: '#/components/schemas/Token'
                  userId:
                    $ref: '#/components/schemas/UserId'
                  name:
                    $ref: '#/components/schemas/Name'
        '400':
          $ref: '#/components/responses/InputError'
  /api/movie/homepage:
    get:
      tags:
        - Movies
      summary: Get the list of movies for the home page
      description: Returns the list of movies for the home page
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  movies:
                    type: array
                    items:
                      $ref: '#/components/schemas/MovieSummary'
  /api/movie/getMovie:
    get:
      tags:
        - Movies
      summary: Get the details of a specific movie
      description: Returns the details of a specific movie
      parameters:
        - $ref: '#/components/parameters/MovieIdParam'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  name:
                    $ref: '#/components/schemas/MovieName'
                  year:
                    $ref: '#/components/schemas/MovieYear'
                  poster:
                    $ref: '#/components/schemas/MoviePoster'
                  trailer:
                    $ref: '#/components/schemas/YoutubeVideoId'
                  description:
                    $ref: '#/components/schemas/MovieDescription'
                  director:
                    $ref: '#/components/schemas/Director'
                  genres:
                    $ref: '#/components/schemas/Genres'
                  contentRating:
                    $ref: '#/components/schemas/ContentRating'
                  averageRating:
                    $ref: '#/components/schemas/AverageRating'
                  runtime:
                    $ref: '#/components/schemas/Runtime'
                  cast:
                    $ref: '#/components/schemas/Cast'
                  reviews:
                    type: array
                    maxItems: 10
                    items:
                      $ref: '#/components/schemas/Review'
        '400':
          $ref: '#/components/responses/InputError'
        '404':
          $ref: '#/components/responses/NotFoundError'
  /api/movie/search:
    get:
      tags:
        - Movies
      summary: Search for movies
      description: Returns the details of movies matching the search criteria
      parameters:
        - $ref: '#/components/parameters/SearchNameParam'
        - $ref: '#/components/parameters/MovieGenresParam'
        - $ref: '#/components/parameters/ContentRatingParam'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  movies:
                    type: array
                    items:
                      $ref: '#/components/schemas/MovieSummary'
                  actors:
                    type: array
                    items:
                      type: object
                      properties:
                        name:
                          $ref: '#/components/schemas/Actor'
                        id:
                          $ref: '#/components/schemas/ActorId'
                  directors:
                    type: array
                    items:
                      type: object
                      properties:
                        name:
                          $ref: '#/components/schemas/Director'
                        id:
                          $ref: '#/components/schemas/DirectorId'
        '400':
          $ref: '#/components/responses/InputError'
        '404':
          $ref: '#/components/responses/NotFoundError'
  /api/movie/genres:
    get:
      tags:
        - Movies
      summary: Get the possible genres
      description: Returns the list of possible genres
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  genres:
                    $ref: '#/components/schemas/Genres'
  /api/movie/addMovie:
    post:
      tags:
        - Movies
      summary: Add a movie
      description: Route for admin to add a movie to the database
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                token:
                  $ref: '#/components/schemas/Token'
                name:
                  $ref: '#/components/schemas/MovieName'
                year:
                  $ref: '#/components/schemas/MovieYear'
                poster:
                  $ref: '#/components/schemas/MoviePoster'
                trailer:
                  $ref: '#/components/schemas/YoutubeVideoId'
                description:
                  $ref: '#/components/schemas/MovieDescription'
                director:
                  $ref: '#/components/schemas/Director'
                genres:
                  $ref: '#/components/schemas/Genres'
                contentRating:
                  $ref: '#/components/schemas/ContentRating'
                runtime:
                  $ref: '#/components/schemas/Runtime'
                cast:
                  $ref: '#/components/schemas/Cast'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  movieId:
                    $ref: '#/components/schemas/MovieId'
                  name:
                    $ref: '#/components/schemas/MovieName'
                  year:
                    $ref: '#/components/schemas/MovieYear'
        '400':
          $ref: '#/components/responses/InputError'
  /api/movie/editMovie:
    put:
      tags:
        - Movies
      summary: Edit a movie
      description: Route for admin to edit a movie in the database
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                token:
                  $ref: '#/components/schemas/Token'
                id:
                  $ref: '#/components/schemas/MovieId'
                name:
                  $ref: '#/components/schemas/MovieName'
                year:
                  $ref: '#/components/schemas/MovieYear'
                poster:
                  $ref: '#/components/schemas/MoviePoster'
                trailer:
                  $ref: '#/components/schemas/YoutubeVideoId'
                description:
                  $ref: '#/components/schemas/MovieDescription'
                director:
                  $ref: '#/components/schemas/Director'
                genres:
                  $ref: '#/components/schemas/Genres'
                contentRating:
                  $ref: '#/components/schemas/ContentRating'
                runtime:
                  $ref: '#/components/schemas/Runtime'
                cast:
                  $ref: '#/components/schemas/Cast'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
        '400':
          $ref: '#/components/responses/InputError'
  /api/movie/deleteMovie:
    post:
      tags:
        - Movies
      summary: Delete movie
      description: Route for admin to delete a movie from the database
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                token:
                  $ref: '#/components/schemas/Token'
                movieId:
                  $ref: '#/components/schemas/MovieId'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
        '400':
          $ref: '#/components/responses/InputError'
        '403':
          $ref: '#/components/responses/AccessError'
        '404':
          $ref: '#/components/responses/NotFoundError'
  /api/movie/addReview:
    post:
      tags:
        - Movies
      summary: Add a review to a movie
      description: Add a review to a movie
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                token:
                  $ref: '#/components/schemas/Token'
                movieId:
                  $ref: '#/components/schemas/MovieId'
                review:
                  $ref: '#/components/schemas/ReviewString'
                rating:
                  $ref: '#/components/schemas/ReviewRating'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
        '400':
          $ref: '#/components/responses/InputError'
        '403':
          $ref: '#/components/responses/AccessError'
  /api/user/wishlist:
    get:
      tags:
        - Users
      summary: Get the wishlist of a specific user
      description: Returns the wishlist of a specific movie
      parameters:
        - $ref: '#/components/parameters/UserIdParam'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - type: object
                    properties:
                      username:
                        $ref: '#/components/schemas/Name'
                      movies:
                        type: array
                        items:
                          $ref: '#/components/schemas/MovieSummary'
        '400':
          $ref: '#/components/responses/InputError'
        '404':
          $ref: '#/components/responses/NotFoundError'
    put:
      security:
        - bearerAuth: []
      tags:
        - Users
      summary: Add or remove a movie from wishlist
      description: Allow an authorised user to add or remove a movie from their wishlist. If 'on' is set to true, then the action adds the movie. If 'on' is set to false, then the action removes the movie.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                token:
                  $ref: '#/components/schemas/Token'
                movieId:
                  $ref: '#/components/schemas/MovieId'
                turnon:
                  $ref: '#/components/schemas/TurnOn'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
        '400':
          $ref: '#/components/responses/InputError'
        '403':
          $ref: '#/components/responses/AccessError'
  /api/user/reviews:
    get:
      tags:
        - Users
      summary: Get the reviews of a specific user
      description: Returns the reviews of a specific user
      parameters:
        - $ref: '#/components/parameters/UserIdParam'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  username:
                    $ref: '#/components/schemas/Name'
                  reviews:
                    type: array
                    items:
                      type: object
                      properties:
                        movieId:
                          $ref: '#/components/schemas/MovieId'
                        movieName:
                          $ref: '#/components/schemas/MovieName'
                        review:
                          $ref: '#/components/schemas/ReviewString'
                        rating:
                          $ref: '#/components/schemas/ReviewRating'
        '400':
          $ref: '#/components/responses/InputError'
        '404':
          $ref: '#/components/responses/NotFoundError'
  /api/user/deleteReview:
    post:
      tags:
        - Users
      summary: Delete a review
      description: Route to delete a review
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                token:
                  $ref: '#/components/schemas/Token'
                movieId:
                  $ref: '#/components/schemas/MovieId'
                userId:
                  $ref: '#/components/schemas/UserId'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
        '400':
          $ref: '#/components/responses/InputError'
        '403':
          $ref: '#/components/responses/AccessError'
        '404':
          $ref: '#/components/responses/NotFoundError'
  /api/user/requestResetPassword:
    post:
      tags:
        - Users
      summary: Request the reset password email
      description: Route for a user to request a password reset email
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  $ref: '#/components/schemas/Email'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
        '404':
          $ref: '#/components/responses/NotFoundError'
  /api/user/resetPassword:
    post:
      tags:
        - Users
      summary: Change the password of a user
      description: Change the password of a user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                resetCode:
                  $ref: '#/components/schemas/ResetPasswordCode'
                password:
                  $ref: '#/components/schemas/Password'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
        '404':
          $ref: '#/components/responses/NotFoundError'
  /api/user/banUser:
    put:
      tags:
        - Users
      summary: Ban a user
      description: Admin route to ban a user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                token:
                  $ref: '#/components/schemas/Token'
                userId:
                  $ref: '#/components/schemas/UserId'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
        '400':
          $ref: '#/components/responses/InputError'
        '403':
          $ref: '#/components/responses/AccessError'
        '404':
          $ref: '#/components/responses/NotFoundError'
  /api/actor/getActor:
    get:
      tags:
        - Actors
      summary: Get the details of a specific actor
      description: Returns the details of a specific actor
      parameters:
        - $ref: '#/components/parameters/ActorIdParam'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  name:
                    $ref: '#/components/schemas/Actor'
                  movies:
                    type: array
                    items:
                      $ref: '#/components/schemas/MovieSummary'
        '400':
          $ref: '#/components/responses/InputError'
        '404':
          $ref: '#/components/responses/NotFoundError'
  /api/director/getDirector:
    get:
      tags:
        - Directors
      summary: Get the details of a specific director
      description: Returns the details of a specific director
      parameters:
        - $ref: '#/components/parameters/DirectorIdParam'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  name:
                    $ref: '#/components/schemas/Director'
                  movies:
                    type: array
                    items:
                      $ref: '#/components/schemas/MovieSummary'
        '400':
          $ref: '#/components/responses/InputError'
        '404':
          $ref: '#/components/responses/NotFoundError'
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    Token:
      type: string
      format: jwt
      description: Token to provide authorisation
      example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6ImhheWRlbkB1bnN3LmVkdS5hdSIsImlhdCI6MTYwMzk0MzIzMH0.b37PfwlcH_cue6yhgvDt2IiNvhRACf79hTNtacYB94Q
    Email:
      type: string
      description: User's email address
      example: donald@email.com
    Password:
      type: string
      description: User's password
      example: Password123
    Name:
      type: string
      description: User's name
      example: Donald Knuth
    UserId:
      type: number
      description: ID of the user
      example: 1729
    MovieId:
      type: number
      description: ID of the movie
      example: 6174
    MovieName:
      type: string
      description: Name of the movie
      example: Morbius
    MovieYear:
      type: integer
      description: Release year of the movie
      example: 2022
    MovieDescription:
      type: string
      description: Description of the movie
      example: Biochemist Michael Morbius tries to cure himself of a rare blood disease, but he inadvertently infects himself with a form of vampirism instead.
    MoviePoster:
      type: string
      format: url
      description: Image url
      example: https://i.imgur.com/CBC2V7j.jpeg
    YoutubeVideoId:
      type: string
      description: The YouTube video id is a unique identifier of every video on YouTube
      example: dQw4w9WgXcQ
    Director:
      type: string
      description: Name of a director
      example: Steven Spielberg
    DirectorId:
      type: number
      description: ID of the director
      example: 1729
    Actor:
      type: string
      description: Name of a actor
      example: Johnny Depp
    ActorId:
      type: number
      description: ID of the actor
      example: 1729
    Genre:
      type: string
      description: Genre of a movie
      enum:
        - Action
        - Horror
        - Comedy
        - Fantasy
      example: Action
    Genres:
      type: array
      items:
        $ref: '#/components/schemas/Genre'
      example:
        - Action
        - Fantasy
    ContentRating:
      type: string
      description: Content rating of a movie
      enum:
        - G
        - PG
        - PG-13
        - R
      example: PG
    AverageRating:
      type: number
      minimum: 0
      maximum: 5
      multipleOf: 0.01
      description: Average number rating
      example: 3.14
    Runtime:
      type: number
      description: The runtime in minutes
      example: 100
    Cast:
      type: string
      description: Cast of a movie
      example: Johnny Depp, Will Smith
    ReviewString:
      type: string
      description: A review of a movie
      example: It's Morbin Time
    ReviewRating:
      type: integer
      description: A rating of a movie
      example: 5
    Review:
      type: object
      properties:
        user:
          $ref: '#/components/schemas/UserId'
        name:
          $ref: '#/components/schemas/Name'
        review:
          $ref: '#/components/schemas/ReviewString'
        rating:
          $ref: '#/components/schemas/ReviewRating'
    TurnOn:
      type: boolean
      description: True if should add/enable, false if should remove/disable
      example: true
    MovieSummary:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/MovieId'
        name:
          $ref: '#/components/schemas/MovieName'
        year:
          $ref: '#/components/schemas/MovieYear'
        poster:
          $ref: '#/components/schemas/MoviePoster'
        description:
          $ref: '#/components/schemas/MovieDescription'
        genres:
          $ref: '#/components/schemas/Genres'
        averageRating:
          $ref: '#/components/schemas/AverageRating'
    IsAdmin:
      type: boolean
      description: Whether the authorised user is an admin
      example: false
    ResetPasswordCode:
      type: string
      description: Code to identify user resetting their password
  parameters:
    UserIdParam:
      name: userId
      in: query
      description: ID of the user
      required: true
      schema:
        $ref: '#/components/schemas/UserId'
    MovieIdParam:
      name: id
      in: query
      description: ID of the movie
      required: true
      schema:
        $ref: '#/components/schemas/MovieId'
    ActorIdParam:
      name: id
      in: query
      description: ID of the actor
      required: true
      schema:
        $ref: '#/components/schemas/ActorId'
    DirectorIdParam:
      name: id
      in: query
      description: ID of the director
      required: true
      schema:
        $ref: '#/components/schemas/DirectorId'
    SearchNameParam:
      name: name
      in: query
      description: Search query
      required: true
      schema:
        $ref: '#/components/schemas/MovieName'
    MovieGenresParam:
      name: genres
      in: query
      description: List of genres
      required: false
      schema:
        type: string
        example: action,fantasy
    ContentRatingParam:
      name: contentRating
      in: query
      description: Content rating
      required: false
      schema:
        $ref: '#/components/schemas/ContentRating'
  responses:
    InputError:
      description: Input error
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
                example: Invalid input
    AccessError:
      description: Access error
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
                example: Invalid token
    NotFoundError:
      description: Not found error
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
                example: Not found
